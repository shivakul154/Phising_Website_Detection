{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":975216,"sourceType":"datasetVersion","datasetId":532277}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom sklearn.model_selection import train_test_split,cross_val_score\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.727989Z","iopub.execute_input":"2025-07-02T19:27:27.728429Z","iopub.status.idle":"2025-07-02T19:27:27.740175Z","shell.execute_reply.started":"2025-07-02T19:27:27.728398Z","shell.execute_reply":"2025-07-02T19:27:27.739150Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data=pd.read_csv(r\"../input/phishing-website-detector/phishing.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.741740Z","iopub.execute_input":"2025-07-02T19:27:27.742124Z","iopub.status.idle":"2025-07-02T19:27:27.795349Z","shell.execute_reply.started":"2025-07-02T19:27:27.742094Z","shell.execute_reply":"2025-07-02T19:27:27.794455Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.796331Z","iopub.execute_input":"2025-07-02T19:27:27.796637Z","iopub.status.idle":"2025-07-02T19:27:27.811348Z","shell.execute_reply.started":"2025-07-02T19:27:27.796609Z","shell.execute_reply":"2025-07-02T19:27:27.810477Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.813484Z","iopub.execute_input":"2025-07-02T19:27:27.813824Z","iopub.status.idle":"2025-07-02T19:27:27.930995Z","shell.execute_reply.started":"2025-07-02T19:27:27.813798Z","shell.execute_reply":"2025-07-02T19:27:27.929433Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.932018Z","iopub.execute_input":"2025-07-02T19:27:27.932466Z","iopub.status.idle":"2025-07-02T19:27:27.939184Z","shell.execute_reply.started":"2025-07-02T19:27:27.932435Z","shell.execute_reply":"2025-07-02T19:27:27.938196Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.940413Z","iopub.execute_input":"2025-07-02T19:27:27.940786Z","iopub.status.idle":"2025-07-02T19:27:27.961645Z","shell.execute_reply.started":"2025-07-02T19:27:27.940736Z","shell.execute_reply":"2025-07-02T19:27:27.960592Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.isnull()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:27.963359Z","iopub.execute_input":"2025-07-02T19:27:27.963715Z","iopub.status.idle":"2025-07-02T19:27:28.007922Z","shell.execute_reply.started":"2025-07-02T19:27:27.963687Z","shell.execute_reply":"2025-07-02T19:27:28.006433Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.009103Z","iopub.execute_input":"2025-07-02T19:27:28.009516Z","iopub.status.idle":"2025-07-02T19:27:28.033833Z","shell.execute_reply.started":"2025-07-02T19:27:28.009487Z","shell.execute_reply":"2025-07-02T19:27:28.032932Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X= data.drop(columns='class')\nX.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.036819Z","iopub.execute_input":"2025-07-02T19:27:28.037087Z","iopub.status.idle":"2025-07-02T19:27:28.070980Z","shell.execute_reply.started":"2025-07-02T19:27:28.037067Z","shell.execute_reply":"2025-07-02T19:27:28.070032Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Y=data['class']\nY=pd.DataFrame(Y)\nY.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.071898Z","iopub.execute_input":"2025-07-02T19:27:28.072228Z","iopub.status.idle":"2025-07-02T19:27:28.084183Z","shell.execute_reply.started":"2025-07-02T19:27:28.072203Z","shell.execute_reply":"2025-07-02T19:27:28.082723Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_X,test_X,train_Y,test_Y=train_test_split(X,Y,test_size=0.3,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.085308Z","iopub.execute_input":"2025-07-02T19:27:28.085844Z","iopub.status.idle":"2025-07-02T19:27:28.112278Z","shell.execute_reply.started":"2025-07-02T19:27:28.085808Z","shell.execute_reply":"2025-07-02T19:27:28.111023Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_X.shape)\nprint(test_X.shape)\nprint(train_Y.shape)\nprint(test_Y.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.113909Z","iopub.execute_input":"2025-07-02T19:27:28.114301Z","iopub.status.idle":"2025-07-02T19:27:28.133612Z","shell.execute_reply.started":"2025-07-02T19:27:28.114210Z","shell.execute_reply":"2025-07-02T19:27:28.132610Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###  Logistic regression","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\n\npipe = make_pipeline(\n    StandardScaler(),\n    LogisticRegression(\n        penalty='l2',         # default\n        solver='lbfgs',       # good generalâ€‘purpose solver\n        max_iter=1000,        # give it room\n        n_jobs=-1             # parallelize if you like\n    )\n)\n\nmodel_1=pipe.fit(train_X, train_Y.squeeze())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:28.134602Z","iopub.execute_input":"2025-07-02T19:27:28.134914Z","iopub.status.idle":"2025-07-02T19:27:29.424094Z","shell.execute_reply.started":"2025-07-02T19:27:28.134890Z","shell.execute_reply":"2025-07-02T19:27:29.423183Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"logreg=LogisticRegression()\n\nlogreg_predict= model_1.predict(test_X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:29.425113Z","iopub.execute_input":"2025-07-02T19:27:29.425378Z","iopub.status.idle":"2025-07-02T19:27:29.433222Z","shell.execute_reply.started":"2025-07-02T19:27:29.425357Z","shell.execute_reply":"2025-07-02T19:27:29.432181Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy = pipe.score(test_X, test_Y)\nprint(accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:29.434199Z","iopub.execute_input":"2025-07-02T19:27:29.434559Z","iopub.status.idle":"2025-07-02T19:27:29.460453Z","shell.execute_reply.started":"2025-07-02T19:27:29.434526Z","shell.execute_reply":"2025-07-02T19:27:29.459613Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(logreg_predict,test_Y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:29.461725Z","iopub.execute_input":"2025-07-02T19:27:29.462141Z","iopub.status.idle":"2025-07-02T19:27:29.493494Z","shell.execute_reply.started":"2025-07-02T19:27:29.462107Z","shell.execute_reply":"2025-07-02T19:27:29.492321Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_confusion_matrix(test_Y, predict_y):\n C = confusion_matrix(test_Y, predict_y)\n A =(((C.T)/(C.sum(axis=1))).T)\n B =(C/C.sum(axis=0,keepdims=True))\n plt.figure(figsize=(20,4))\n labels = [1,2]\n cmap=sns.light_palette(\"blue\")\n plt.subplot(1, 3, 1)\n sns.heatmap(C, annot=True, cmap=cmap, fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n plt.xlabel('Predicted Class')\n plt.ylabel('Original Class')\n plt.title(\"Confusion matrix\")\n plt.subplot(1, 3, 2)\n sns.heatmap(B, annot=True, cmap=cmap, fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n plt.xlabel('Predicted Class')\n plt.ylabel('Original Class')\n plt.title(\"Precision matrix\")\n plt.subplot(1, 3, 3)\n sns.heatmap(A, annot=True, cmap=cmap, fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n plt.xlabel('Predicted Class')\n plt.ylabel('Original Class')\n plt.title(\"Recall matrix\")\n plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:29.494765Z","iopub.execute_input":"2025-07-02T19:27:29.495081Z","iopub.status.idle":"2025-07-02T19:27:29.502636Z","shell.execute_reply.started":"2025-07-02T19:27:29.495059Z","shell.execute_reply":"2025-07-02T19:27:29.501721Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(test_Y, logreg_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:29.503410Z","iopub.execute_input":"2025-07-02T19:27:29.503627Z","iopub.status.idle":"2025-07-02T19:27:30.153971Z","shell.execute_reply.started":"2025-07-02T19:27:29.503610Z","shell.execute_reply":"2025-07-02T19:27:30.153019Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## KNN","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:30.154909Z","iopub.execute_input":"2025-07-02T19:27:30.155231Z","iopub.status.idle":"2025-07-02T19:27:30.159417Z","shell.execute_reply.started":"2025-07-02T19:27:30.155209Z","shell.execute_reply":"2025-07-02T19:27:30.158559Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"knn=KNeighborsClassifier(n_neighbors=3)\nknn = make_pipeline(\n    StandardScaler(),       # KNN distance metrics benefit from scaling\n    KNeighborsClassifier(\n        n_neighbors=5,      # tweak as needed\n        metric='minkowski', # default (Euclidean distance)\n        n_jobs=-1           # parallelize distance computations\n    )\n)\nmodel_2= knn.fit(train_X,train_Y.squeeze())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:30.160365Z","iopub.execute_input":"2025-07-02T19:27:30.161204Z","iopub.status.idle":"2025-07-02T19:27:30.191471Z","shell.execute_reply.started":"2025-07-02T19:27:30.161173Z","shell.execute_reply":"2025-07-02T19:27:30.190357Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"knn_predict=model_2.predict(test_X)\naccuracy_score(knn_predict,test_Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:30.192368Z","iopub.execute_input":"2025-07-02T19:27:30.192638Z","iopub.status.idle":"2025-07-02T19:27:30.438917Z","shell.execute_reply.started":"2025-07-02T19:27:30.192618Z","shell.execute_reply":"2025-07-02T19:27:30.438077Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(test_Y,knn_predict))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:30.439805Z","iopub.execute_input":"2025-07-02T19:27:30.440096Z","iopub.status.idle":"2025-07-02T19:27:30.459873Z","shell.execute_reply.started":"2025-07-02T19:27:30.440074Z","shell.execute_reply":"2025-07-02T19:27:30.458805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(test_Y, knn_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:30.461048Z","iopub.execute_input":"2025-07-02T19:27:30.461287Z","iopub.status.idle":"2025-07-02T19:27:31.064790Z","shell.execute_reply.started":"2025-07-02T19:27:30.461269Z","shell.execute_reply":"2025-07-02T19:27:31.063955Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Decision Tree classifier","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\nmodel_3=dtree.fit(train_X,train_Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.068537Z","iopub.execute_input":"2025-07-02T19:27:31.068835Z","iopub.status.idle":"2025-07-02T19:27:31.100643Z","shell.execute_reply.started":"2025-07-02T19:27:31.068813Z","shell.execute_reply":"2025-07-02T19:27:31.099796Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dtree_predict=model_3.predict(test_X)\naccuracy_score(dtree_predict,test_Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.101636Z","iopub.execute_input":"2025-07-02T19:27:31.102312Z","iopub.status.idle":"2025-07-02T19:27:31.114110Z","shell.execute_reply.started":"2025-07-02T19:27:31.102277Z","shell.execute_reply":"2025-07-02T19:27:31.112836Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(dtree_predict,test_Y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.115148Z","iopub.execute_input":"2025-07-02T19:27:31.115420Z","iopub.status.idle":"2025-07-02T19:27:31.150628Z","shell.execute_reply.started":"2025-07-02T19:27:31.115399Z","shell.execute_reply":"2025-07-02T19:27:31.149591Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(test_Y, dtree_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.151705Z","iopub.execute_input":"2025-07-02T19:27:31.152070Z","iopub.status.idle":"2025-07-02T19:27:31.725844Z","shell.execute_reply.started":"2025-07-02T19:27:31.152042Z","shell.execute_reply":"2025-07-02T19:27:31.724942Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.726816Z","iopub.execute_input":"2025-07-02T19:27:31.727119Z","iopub.status.idle":"2025-07-02T19:27:31.731810Z","shell.execute_reply.started":"2025-07-02T19:27:31.727089Z","shell.execute_reply":"2025-07-02T19:27:31.730687Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rfc=RandomForestClassifier()\nmodel_4=rfc.fit(train_X,train_Y.squeeze())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:31.733495Z","iopub.execute_input":"2025-07-02T19:27:31.733984Z","iopub.status.idle":"2025-07-02T19:27:32.369287Z","shell.execute_reply.started":"2025-07-02T19:27:31.733953Z","shell.execute_reply":"2025-07-02T19:27:32.368405Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rfc_predict=model_4.predict(test_X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:32.370347Z","iopub.execute_input":"2025-07-02T19:27:32.370670Z","iopub.status.idle":"2025-07-02T19:27:32.431831Z","shell.execute_reply.started":"2025-07-02T19:27:32.370644Z","shell.execute_reply":"2025-07-02T19:27:32.431087Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(rfc_predict,test_Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:32.432689Z","iopub.execute_input":"2025-07-02T19:27:32.433027Z","iopub.status.idle":"2025-07-02T19:27:32.442434Z","shell.execute_reply.started":"2025-07-02T19:27:32.433002Z","shell.execute_reply":"2025-07-02T19:27:32.441648Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(rfc_predict,test_Y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:32.443265Z","iopub.execute_input":"2025-07-02T19:27:32.443584Z","iopub.status.idle":"2025-07-02T19:27:32.473946Z","shell.execute_reply.started":"2025-07-02T19:27:32.443555Z","shell.execute_reply":"2025-07-02T19:27:32.473090Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(test_Y, rfc_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:32.474823Z","iopub.execute_input":"2025-07-02T19:27:32.475110Z","iopub.status.idle":"2025-07-02T19:27:33.215208Z","shell.execute_reply.started":"2025-07-02T19:27:32.475090Z","shell.execute_reply":"2025-07-02T19:27:33.214074Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# SVM","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:33.215957Z","iopub.execute_input":"2025-07-02T19:27:33.216208Z","iopub.status.idle":"2025-07-02T19:27:33.221228Z","shell.execute_reply.started":"2025-07-02T19:27:33.216188Z","shell.execute_reply":"2025-07-02T19:27:33.220077Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"svc=SVC()\nmodel_5=svc.fit(train_X,train_Y.squeeze())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:33.222298Z","iopub.execute_input":"2025-07-02T19:27:33.223036Z","iopub.status.idle":"2025-07-02T19:27:37.622738Z","shell.execute_reply.started":"2025-07-02T19:27:33.223013Z","shell.execute_reply":"2025-07-02T19:27:37.621900Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"svm_predict=model_5.predict(test_X)\naccuracy_score(svm_predict,test_Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:37.623590Z","iopub.execute_input":"2025-07-02T19:27:37.623923Z","iopub.status.idle":"2025-07-02T19:27:39.551279Z","shell.execute_reply.started":"2025-07-02T19:27:37.623896Z","shell.execute_reply":"2025-07-02T19:27:39.550523Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(svm_predict,test_Y,zero_division=0,digits=3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:27:39.552186Z","iopub.execute_input":"2025-07-02T19:27:39.552444Z","iopub.status.idle":"2025-07-02T19:27:39.573120Z","shell.execute_reply.started":"2025-07-02T19:27:39.552424Z","shell.execute_reply":"2025-07-02T19:27:39.572381Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(test_Y, svm_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:28:27.911982Z","iopub.execute_input":"2025-07-02T19:28:27.912299Z","iopub.status.idle":"2025-07-02T19:28:28.564422Z","shell.execute_reply.started":"2025-07-02T19:28:27.912264Z","shell.execute_reply":"2025-07-02T19:28:28.563459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Logistic Regression Accuracy:',accuracy_score(logreg_predict,test_Y))\nprint('K-Nearest Neighbour Accuracy:',accuracy_score(knn_predict,test_Y))\nprint('Decision Tree Classifier Accuracy:',accuracy_score(dtree_predict,test_Y))\nprint('Random Forest Classifier Accuracy:',accuracy_score(rfc_predict,test_Y))\nprint('support Vector Machine Accuracy:',accuracy_score(svm_predict,test_Y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:29:34.455732Z","iopub.execute_input":"2025-07-02T19:29:34.456134Z","iopub.status.idle":"2025-07-02T19:29:34.487292Z","shell.execute_reply.started":"2025-07-02T19:29:34.456101Z","shell.execute_reply":"2025-07-02T19:29:34.486245Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X=data[['PrefixSuffix-','AnchorURL']]\nX.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:30:11.055610Z","iopub.execute_input":"2025-07-02T19:30:11.055995Z","iopub.status.idle":"2025-07-02T19:30:11.065851Z","shell.execute_reply.started":"2025-07-02T19:30:11.055969Z","shell.execute_reply":"2025-07-02T19:30:11.064927Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_X,test_X,train_Y,test_Y=train_test_split(X,Y,test_size=0.3,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:30:30.608050Z","iopub.execute_input":"2025-07-02T19:30:30.608388Z","iopub.status.idle":"2025-07-02T19:30:30.617167Z","shell.execute_reply.started":"2025-07-02T19:30:30.608365Z","shell.execute_reply":"2025-07-02T19:30:30.616097Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_X.shape)\nprint(test_X.shape)\nprint(train_Y.shape)\nprint(test_Y.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:30:41.175237Z","iopub.execute_input":"2025-07-02T19:30:41.175543Z","iopub.status.idle":"2025-07-02T19:30:41.180698Z","shell.execute_reply.started":"2025-07-02T19:30:41.175521Z","shell.execute_reply":"2025-07-02T19:30:41.179692Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_8=logreg.fit(train_X,train_Y.squeeze())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:31:06.888422Z","iopub.execute_input":"2025-07-02T19:31:06.888726Z","iopub.status.idle":"2025-07-02T19:31:06.964259Z","shell.execute_reply.started":"2025-07-02T19:31:06.888704Z","shell.execute_reply":"2025-07-02T19:31:06.961123Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"logreg_predict=model_8.predict(test_X)\naccuracy_score(test_Y,logreg_predict)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:31:56.422946Z","iopub.execute_input":"2025-07-02T19:31:56.423307Z","iopub.status.idle":"2025-07-02T19:31:56.435309Z","shell.execute_reply.started":"2025-07-02T19:31:56.423284Z","shell.execute_reply":"2025-07-02T19:31:56.434168Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x = np.array(X)\nx","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:32:16.762957Z","iopub.execute_input":"2025-07-02T19:32:16.763327Z","iopub.status.idle":"2025-07-02T19:32:16.770514Z","shell.execute_reply.started":"2025-07-02T19:32:16.763302Z","shell.execute_reply":"2025-07-02T19:32:16.769526Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression  \n\nX_vis = data[['PrefixSuffix-', 'AnchorURL']].to_numpy() \ny_vis = data['class'].to_numpy().ravel()\n\nmodel_2 = make_pipeline(\n    StandardScaler(),\n    LogisticRegression()\n)\nmodel_2.fit(X_vis, y_vis)\n\n\nplot_decision_regions(X_vis, y_vis, clf=model_2, legend=2)\nplt.xlabel('PrefixSuffix-')\nplt.ylabel('AnchorURL')\nplt.title('Decision Regions (2 features)')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:41:35.424214Z","iopub.execute_input":"2025-07-02T19:41:35.424501Z","iopub.status.idle":"2025-07-02T19:41:35.868298Z","shell.execute_reply.started":"2025-07-02T19:41:35.424482Z","shell.execute_reply":"2025-07-02T19:41:35.867262Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt   \n\n\nX_vis = data[['PrefixSuffix-', 'AnchorURL']].to_numpy()\ny_vis = data['class'].to_numpy().ravel()\n\nknn_model = make_pipeline(\n    StandardScaler(),\n    KNeighborsClassifier(\n        n_neighbors=5,  \n        weights='uniform',  \n        metric='minkowski',\n        n_jobs=-1           \n    )\n)\n\nknn_model.fit(X_vis, y_vis)\n\n\nplot_decision_regions(X_vis, y_vis, clf=knn_model, legend=2)\nplt.xlabel('PrefixSuffix-')\nplt.ylabel('AnchorURL')\nplt.title('Decision Regions (KNN, 2 features)')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:43:55.654288Z","iopub.execute_input":"2025-07-02T19:43:55.654604Z","iopub.status.idle":"2025-07-02T19:44:29.008962Z","shell.execute_reply.started":"2025-07-02T19:43:55.654582Z","shell.execute_reply":"2025-07-02T19:44:29.008125Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\n\nX_vis = data[['PrefixSuffix-', 'AnchorURL']].to_numpy()\ny_vis = data['class'].to_numpy().ravel()\n\ndt_model = DecisionTreeClassifier(\n    criterion='gini',\n    max_depth=None,\n    random_state=42\n)\ndt_model.fit(X_vis, y_vis)\n\nplot_decision_regions(X_vis, y_vis, clf=dt_model, legend=2)\nplt.xlabel('PrefixSuffix-')\nplt.ylabel('AnchorURL')\nplt.title('Decision Regions (Decision Tree, 2 features)')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:45:32.424321Z","iopub.execute_input":"2025-07-02T19:45:32.424623Z","iopub.status.idle":"2025-07-02T19:45:32.714533Z","shell.execute_reply.started":"2025-07-02T19:45:32.424601Z","shell.execute_reply":"2025-07-02T19:45:32.713682Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\n\nX_vis = data[['PrefixSuffix-', 'AnchorURL']].to_numpy()\ny_vis = data['class'].to_numpy().ravel()\n\nrf_model = RandomForestClassifier(\n    n_estimators=100,\n    max_depth=None,\n    random_state=42\n)\nrf_model.fit(X_vis, y_vis)\n\nplot_decision_regions(X_vis, y_vis, clf=rf_model, legend=2)\nplt.xlabel('PrefixSuffix-')\nplt.ylabel('AnchorURL')\nplt.title('Decision Regions (Random Forest, 2 features)')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:46:23.323436Z","iopub.execute_input":"2025-07-02T19:46:23.323770Z","iopub.status.idle":"2025-07-02T19:46:25.365871Z","shell.execute_reply.started":"2025-07-02T19:46:23.323728Z","shell.execute_reply":"2025-07-02T19:46:25.364665Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from mlxtend.plotting import plot_decision_regions\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\nX_vis = data[['PrefixSuffix-', 'AnchorURL']].to_numpy()\ny_vis = data['class'].to_numpy().ravel()\n\nsvm_model = make_pipeline(\n    StandardScaler(),\n    SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42)\n)\nsvm_model.fit(X_vis, y_vis)\n\nplot_decision_regions(X_vis, y_vis, clf=svm_model, legend=2)\nplt.xlabel('PrefixSuffix-')\nplt.ylabel('AnchorURL')\nplt.title('Decision Regions (SVM, 2 features)')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T19:47:01.075416Z","iopub.execute_input":"2025-07-02T19:47:01.075727Z","iopub.status.idle":"2025-07-02T19:47:49.041837Z","shell.execute_reply.started":"2025-07-02T19:47:01.075701Z","shell.execute_reply":"2025-07-02T19:47:49.040920Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}